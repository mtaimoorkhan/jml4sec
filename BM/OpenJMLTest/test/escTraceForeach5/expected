Proving methods in trace
Starting proof of trace.mforeach5(int[]) with prover z3_4_3

TRACE of trace.mforeach5(int[])

test\escTraceLoops\trace.java:205:  	requires a != null; 
			VALUE: a	 === REF!val!1
			VALUE: null	 === NULL
			VALUE: a != null	 === true
test\escTraceLoops\trace.java:206:  	int j = 0
			VALUE: 0	 === 0
			VALUE: j	 === 0
test\escTraceLoops\trace.java:207:  	//@ loop_invariant j == \count && 0 <= \count && \count <= a.length;
			VALUE: j	 === 0
			VALUE: \count	 === 0
			VALUE: j == \count	 === true
			VALUE: 0	 === 0
			VALUE: \count	 === 0
			VALUE: 0 <= \count	 === true
			VALUE: j == \count && 0 <= \count	 === true
			VALUE: \count	 === 0
			VALUE: a	 === REF!val!1
			VALUE: a.length	 === 2
			VALUE: \count <= a.length	 === true
			VALUE: j == \count && 0 <= \count && \count <= a.length	 === true
test\escTraceLoops\trace.java:209:  	Begin loop check
test\escTraceLoops\trace.java:207:  	//@ loop_invariant j == \count && 0 <= \count && \count <= a.length;
			VALUE: j	 === 1
			VALUE: \count	 === 1
			VALUE: j == \count	 === true
			VALUE: 0	 === 0
			VALUE: \count	 === 1
			VALUE: 0 <= \count	 === true
			VALUE: j == \count && 0 <= \count	 === true
			VALUE: \count	 === 1
			VALUE: a	 === REF!val!1
			VALUE: a.length	 === 2
			VALUE: \count <= a.length	 === true
			VALUE: j == \count && 0 <= \count && \count <= a.length	 === true
test\escTraceLoops\trace.java:208:  	//@ decreases -j;
			VALUE: j	 === 1
			VALUE: -j	 === ( - 1 )
				Initial Value of Loop Decreases Expression = ( - 1 )
test\escTraceLoops\trace.java:209:  	Loop test
			VALUE: \count	 === 1
			VALUE: _JML__tmp111	 === 2
			VALUE: \count < _JML__tmp111	 === true
test\escTraceLoops\trace.java:208: warning: The prover cannot establish an assertion (LoopDecreasesNonNegative) in method mforeach5
        //@ decreases -j;
            ^
Completed proof of trace.mforeach5(int[]) with prover z3_4_3 - with warnings
Completed proving methods in trace
1 warning
