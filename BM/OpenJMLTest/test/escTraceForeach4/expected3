Proving methods in trace
Skipping proof of trace.trace() (excluded by -method)
Skipping proof of trace.mgood() (excluded by -method)
Skipping proof of trace.m1() (excluded by -method)
Skipping proof of trace.m2() (excluded by -method)
Skipping proof of trace.m3() (excluded by -method)
Skipping proof of trace.m4() (excluded by -method)
Skipping proof of trace.m5() (excluded by -method)
Skipping proof of trace.m6() (excluded by -method)
Skipping proof of trace.mwhile() (excluded by -method)
Skipping proof of trace.mwhile1() (excluded by -method)
Skipping proof of trace.mwhile2() (excluded by -method)
Skipping proof of trace.mdo() (excluded by -method)
Skipping proof of trace.mdo1() (excluded by -method)
Skipping proof of trace.mdo2() (excluded by -method)
Skipping proof of trace.mforeach(int[]) (excluded by -method)
Skipping proof of trace.mforeach1(int[]) (excluded by -method)
Skipping proof of trace.mforeach2(int[]) (excluded by -method)
Skipping proof of trace.mforeach3(int[]) (excluded by -method)
Starting proof of trace.mforeach4(int[]) with prover !!!!
test\escTraceLoops\trace.java:198: warning: The prover cannot establish an assertion (LoopDecreases) in method mforeach4
        //@ decreases j;
            ^

TRACE of trace.mforeach4(int[])
 	//Declare pre-state value of formals
 	//Assume axioms
 	//Assume static final constant fields
 	//Assume field type, allocation, and nullness
test\escTraceLoops\trace.java:195:  	assume ImplicitAssume -2147483648 <= THIS.objectTimesFinalized && THIS.objectTimesFinalized <= 2147483647; ...
			VALUE: -2147483648	 === ???
			VALUE: THIS	 === THIS
			VALUE: THIS.java.lang.Object_objectTimesFinalized_10263	 === ???
			VALUE: -2147483648 <= THIS.java.lang.Object_objectTimesFinalized_10263	 === ???
			VALUE: -2147483648 <= THIS.java.lang.Object_objectTimesFinalized_10263 && THIS.java.lang.Object_objectTimesFinalized_10263 <= 2147483647	 === ???
test\escTraceLoops\trace.java:1:  	assume ImplicitAssume (THIS.theString == null || THIS.theString instanceof java.lang.Object && <:(\typeof(THIS.theString), \type(java.lang.Object))) && (THIS.theString == null || THIS.theString instanceof java.lang.CharSequence && <:(\typeof(THIS.theString), \type(java.lang.CharSequence))) && (THIS.theString == null || THIS.theString instanceof java.lang.Comparable && <:(\typeof(THIS.theString), \type(java.lang.Comparable<java.lang.String>))) && (THIS.theString == null || THIS.theString instanceof java.io.Serializable && <:(\typeof(THIS.theString), \type(java.io.Serializable))) && (THIS.theString == null || THIS.theString instanceof java.lang.String && <:(\typeof(THIS.theString), \type(java.lang.String))); ...
			VALUE: THIS	 === THIS
			VALUE: THIS.java.lang.Object_theString_8073	 === ???
			VALUE: null	 === NULL
			VALUE: THIS.java.lang.Object_theString_8073 == null	 === ???
			VALUE: THIS.java.lang.Object_theString_8073 == null || THIS.java.lang.Object_theString_8073 instanceof java.lang.Object && <:(\typeof(THIS.java.lang.Object_theString_8073), \type(java.lang.Object))	 === ???
			VALUE: (THIS.java.lang.Object_theString_8073 == null || THIS.java.lang.Object_theString_8073 instanceof java.lang.Object && <:(\typeof(THIS.java.lang.Object_theString_8073), \type(java.lang.Object))) && (THIS.java.lang.Object_theString_8073 == null || THIS.java.lang.Object_theString_8073 instanceof java.lang.CharSequence && <:(\typeof(THIS.java.lang.Object_theString_8073), \type(java.lang.CharSequence)))	 === ???
			VALUE: (THIS.java.lang.Object_theString_8073 == null || THIS.java.lang.Object_theString_8073 instanceof java.lang.Object && <:(\typeof(THIS.java.lang.Object_theString_8073), \type(java.lang.Object))) && (THIS.java.lang.Object_theString_8073 == null || THIS.java.lang.Object_theString_8073 instanceof java.lang.CharSequence && <:(\typeof(THIS.java.lang.Object_theString_8073), \type(java.lang.CharSequence))) && (THIS.java.lang.Object_theString_8073 == null || THIS.java.lang.Object_theString_8073 instanceof java.lang.Comparable && <:(\typeof(THIS.java.lang.Object_theString_8073), \type(java.lang.Comparable<java.lang.String>)))	 === ???
			VALUE: (THIS.java.lang.Object_theString_8073 == null || THIS.java.lang.Object_theString_8073 instanceof java.lang.Object && <:(\typeof(THIS.java.lang.Object_theString_8073), \type(java.lang.Object))) && (THIS.java.lang.Object_theString_8073 == null || THIS.java.lang.Object_theString_8073 instanceof java.lang.CharSequence && <:(\typeof(THIS.java.lang.Object_theString_8073), \type(java.lang.CharSequence))) && (THIS.java.lang.Object_theString_8073 == null || THIS.java.lang.Object_theString_8073 instanceof java.lang.Comparable && <:(\typeof(THIS.java.lang.Object_theString_8073), \type(java.lang.Comparable<java.lang.String>))) && (THIS.java.lang.Object_theString_8073 == null || THIS.java.lang.Object_theString_8073 instanceof java.io.Serializable && <:(\typeof(THIS.java.lang.Object_theString_8073), \type(java.io.Serializable)))	 === ???
			VALUE: (THIS.java.lang.Object_theString_8073 == null || THIS.java.lang.Object_theString_8073 instanceof java.lang.Object && <:(\typeof(THIS.java.lang.Object_theString_8073), \type(java.lang.Object))) && (THIS.java.lang.Object_theString_8073 == null || THIS.java.lang.Object_theString_8073 instanceof java.lang.CharSequence && <:(\typeof(THIS.java.lang.Object_theString_8073), \type(java.lang.CharSequence))) && (THIS.java.lang.Object_theString_8073 == null || THIS.java.lang.Object_theString_8073 instanceof java.lang.Comparable && <:(\typeof(THIS.java.lang.Object_theString_8073), \type(java.lang.Comparable<java.lang.String>))) && (THIS.java.lang.Object_theString_8073 == null || THIS.java.lang.Object_theString_8073 instanceof java.io.Serializable && <:(\typeof(THIS.java.lang.Object_theString_8073), \type(java.io.Serializable))) && (THIS.java.lang.Object_theString_8073 == null || THIS.java.lang.Object_theString_8073 instanceof java.lang.String && <:(\typeof(THIS.java.lang.Object_theString_8073), \type(java.lang.String)))	 === ???
test\escTraceLoops\trace.java:195:  	assume ImplicitAssume -2147483648 <= THIS.theHashCode && THIS.theHashCode <= 2147483647; ...
			VALUE: -2147483648	 === ???
			VALUE: THIS	 === THIS
			VALUE: THIS.java.lang.Object_theHashCode_2057	 === ???
			VALUE: -2147483648 <= THIS.java.lang.Object_theHashCode_2057	 === ???
			VALUE: -2147483648 <= THIS.java.lang.Object_theHashCode_2057 && THIS.java.lang.Object_theHashCode_2057 <= 2147483647	 === ???
test\escTraceLoops\trace.java:1:  	assume ImplicitAssume THIS.owner == null || THIS.owner instanceof java.lang.Object && <:(\typeof(THIS.owner), \type(java.lang.Object)); ...
			VALUE: THIS	 === THIS
			VALUE: THIS.java.lang.Object_owner_1530	 === ???
			VALUE: null	 === NULL
			VALUE: THIS.java.lang.Object_owner_1530 == null	 === ???
			VALUE: THIS.java.lang.Object_owner_1530 == null || THIS.java.lang.Object_owner_1530 instanceof java.lang.Object && <:(\typeof(THIS.java.lang.Object_owner_1530), \type(java.lang.Object))	 === ???
test\escTraceLoops\trace.java:1:  	assume ImplicitAssume THIS.privateState == null || THIS.privateState instanceof java.lang.Object && <:(\typeof(THIS.privateState), \type(java.lang.Object)); ...
			VALUE: THIS	 === THIS
			VALUE: THIS.java.lang.Object_privateState_1296	 === ???
			VALUE: null	 === NULL
			VALUE: THIS.java.lang.Object_privateState_1296 == null	 === ???
			VALUE: THIS.java.lang.Object_privateState_1296 == null || THIS.java.lang.Object_privateState_1296 instanceof java.lang.Object && <:(\typeof(THIS.java.lang.Object_privateState_1296), \type(java.lang.Object))	 === ???
test\escTraceLoops\trace.java:1:  	assume ImplicitAssume THIS.objectState == null || THIS.objectState instanceof java.lang.Object && <:(\typeof(THIS.objectState), \type(java.lang.Object)); ...
			VALUE: THIS	 === THIS
			VALUE: THIS.java.lang.Object_objectState_1171	 === ???
			VALUE: null	 === NULL
			VALUE: THIS.java.lang.Object_objectState_1171 == null	 === ???
			VALUE: THIS.java.lang.Object_objectState_1171 == null || THIS.java.lang.Object_objectState_1171 instanceof java.lang.Object && <:(\typeof(THIS.java.lang.Object_objectState_1171), \type(java.lang.Object))	 === ???
 	//Assume parameter type, allocation, and nullness
test\escTraceLoops\trace.java:195:  	assume ImplicitAssume a == null || \typeof(a) == \type(int[]) && <:(\typeof(a), \type(int[])) && \elemtype(\typeof(a)) == \type(int); ...
			VALUE: a_4450	 === REF!val!12
			VALUE: null	 === ???
			VALUE: a_4450 == null	 === ???
			VALUE: a_4450 == null || \typeof(a_4450) == \type(int[]) && <:(\typeof(a_4450), \type(int[])) && \elemtype(\typeof(a_4450)) == \type(int)	 === ???
 	//Assume invariants for java.lang.Object
 	//if...
 	//Assume final field invariants for java.lang.Object
 	//Assume invariants for trace
 	//Adding invariants for a
 	//Assume invariants for java.lang.Object
 	//if...
 	//Assume final field invariants for java.lang.Object
 	//Assume invariants for Array
 	//Assume Preconditions
test\escTraceLoops\trace.java:195:  	requires a != null; 
			VALUE: a	 === REF!val!12
			VALUE: null	 === NULL
			VALUE: a != null	 === true
 	//try...
 	//Method Body
test\escTraceLoops\trace.java:196:  	int j = 0
			VALUE: 0	 === 0
			VALUE: j	 === 0
test\escTraceLoops\trace.java:197:  	//@ loop_invariant j == \count && 0 <= \count && \count <= a.length;
			VALUE: j	 === ???
			VALUE: \count	 === ???
			VALUE: j == \count	 === ???
			VALUE: j == \count && 0 <= \count	 === ???
			VALUE: j == \count && 0 <= \count && \count <= a.length	 === ???
test\escTraceLoops\trace.java:197:  	UndefinedNullDeReference assertion: !(true && (j == index_4584_113 && 0 <= index_4584_113) && a != null) || a != null
			VALUE: true	 === ???
			VALUE: true && (j == index_4584_113 && 0 <= index_4584_113)	 === true
			VALUE: a	 === REF!val!12
			VALUE: null	 === NULL
			VALUE: a != null	 === true
			VALUE: true && (j == index_4584_113 && 0 <= index_4584_113) && a != null	 === true
			VALUE: !(true && (j == index_4584_113 && 0 <= index_4584_113) && a != null)	 === false
			VALUE: a	 === REF!val!12
			VALUE: null	 === NULL
			VALUE: a != null	 === true
			VALUE: !(true && (j == index_4584_113 && 0 <= index_4584_113) && a != null) || a != null	 === true
test\escTraceLoops\trace.java:197:  	LoopInvariantBeforeLoop assertion: j == index_4584_113 && 0 <= index_4584_113 && index_4584_113 <= a.length
			VALUE: j	 === 0
			VALUE: index_4584_113	 === 0
			VALUE: j == index_4584_113	 === true
			VALUE: 0	 === 0
			VALUE: index_4584_113	 === 0
			VALUE: 0 <= index_4584_113	 === true
			VALUE: j == index_4584_113 && 0 <= index_4584_113	 === true
			VALUE: index_4584_113	 === 0
			VALUE: a	 === REF!val!12
			VALUE: a.length	 === 8946
			VALUE: index_4584_113 <= a.length	 === true
			VALUE: j == index_4584_113 && 0 <= index_4584_113 && index_4584_113 <= a.length	 === true
 	//while...
 	//1
test\escTraceLoops\trace.java:199:  	Begin loop check
test\escTraceLoops\trace.java:197:  	//@ loop_invariant j == \count && 0 <= \count && \count <= a.length;
			VALUE: j	 === 8945
			VALUE: \count	 === 8945
			VALUE: j == \count	 === true
			VALUE: 0	 === 0
			VALUE: \count	 === 8945
			VALUE: 0 <= \count	 === true
			VALUE: j == \count && 0 <= \count	 === true
			VALUE: \count	 === 8945
			VALUE: a	 === REF!val!12
			VALUE: a.length	 === 8946
			VALUE: \count <= a.length	 === true
			VALUE: j == \count && 0 <= \count && \count <= a.length	 === true
test\escTraceLoops\trace.java:197:  	UndefinedNullDeReference assertion: !(true && (j == index_4584_113 && 0 <= index_4584_113) && a != null) || a != null
			VALUE: true	 === ???
			VALUE: true && (j_4467_4613___7 == index_4584_113_4584_4599___8 && 0 <= index_4584_113_4584_4599___8)	 === true
			VALUE: a_4450	 === REF!val!12
			VALUE: null	 === NULL
			VALUE: a_4450 != null	 === true
			VALUE: true && (j_4467_4613___7 == index_4584_113_4584_4599___8 && 0 <= index_4584_113_4584_4599___8) && a_4450 != null	 === true
			VALUE: !(true && (j_4467_4613___7 == index_4584_113_4584_4599___8 && 0 <= index_4584_113_4584_4599___8) && a_4450 != null)	 === false
			VALUE: a_4450	 === REF!val!12
			VALUE: null	 === NULL
			VALUE: a_4450 != null	 === true
			VALUE: !(true && (j_4467_4613___7 == index_4584_113_4584_4599___8 && 0 <= index_4584_113_4584_4599___8) && a_4450 != null) || a_4450 != null	 === true
test\escTraceLoops\trace.java:198:  	//@ decreases j;
			VALUE: j	 === 8945
				Initial Value of Loop Decreases Expression = 8945
test\escTraceLoops\trace.java:199:  	Loop test
			VALUE: \count	 === 8945
			VALUE: _JML__tmp114	 === 8946
			VALUE: \count < _JML__tmp114	 === true
 	//if...
test\escTraceLoops\trace.java:1:  	LoopDecreasesNonNegative assertion: 0 <= _JML__tmp115
			VALUE: 0	 === ???
			VALUE: _JML__tmp115	 === 8945
			VALUE: 0 <= _JML__tmp115	 === true
test\escTraceLoops\trace.java:199:  	Begin loop body
test\escTraceLoops\trace.java:200:  	j += 1
			VALUE: 1	 === 1
			VALUE: j += 1	 === 8946
test\escTraceLoops\trace.java:197:  	//@ loop_invariant j == \count && 0 <= \count && \count <= a.length;
			VALUE: j	 === ???
			VALUE: \count	 === ???
			VALUE: j == \count	 === ???
			VALUE: j == \count && 0 <= \count	 === ???
			VALUE: j == \count && 0 <= \count && \count <= a.length	 === ???
test\escTraceLoops\trace.java:197:  	UndefinedNullDeReference assertion: !(true && (j == index_4584_113 && 0 <= index_4584_113) && a != null) || a != null
			VALUE: true	 === ???
			VALUE: true && (j == index_4584_113 && 0 <= index_4584_113)	 === true
			VALUE: a	 === REF!val!12
			VALUE: null	 === NULL
			VALUE: a != null	 === true
			VALUE: true && (j == index_4584_113 && 0 <= index_4584_113) && a != null	 === true
			VALUE: !(true && (j == index_4584_113 && 0 <= index_4584_113) && a != null)	 === false
			VALUE: a	 === REF!val!12
			VALUE: null	 === NULL
			VALUE: a != null	 === true
			VALUE: !(true && (j == index_4584_113 && 0 <= index_4584_113) && a != null) || a != null	 === true
test\escTraceLoops\trace.java:197:  	LoopInvariant assertion: j == index_4584_113 && 0 <= index_4584_113 && index_4584_113 <= a.length
			VALUE: j	 === 8946
			VALUE: index_4584_113	 === 8946
			VALUE: j == index_4584_113	 === true
			VALUE: 0	 === 0
			VALUE: index_4584_113	 === 8946
			VALUE: 0 <= index_4584_113	 === true
			VALUE: j == index_4584_113 && 0 <= index_4584_113	 === true
			VALUE: index_4584_113	 === 8946
			VALUE: a	 === REF!val!12
			VALUE: a.length	 === 8946
			VALUE: index_4584_113 <= a.length	 === true
			VALUE: j == index_4584_113 && 0 <= index_4584_113 && index_4584_113 <= a.length	 === true
test\escTraceLoops\trace.java:198:  	//@ decreases j;
			VALUE: j	 === 8946
test\escTraceLoops\trace.java:198:  	LoopDecreases assertion: _JML__tmp118 < _JML__tmp115
			VALUE: _JML__tmp118	 === 8946
			VALUE: _JML__tmp115	 === 8945
			VALUE: _JML__tmp118 < _JML__tmp115	 === false
test\escTraceLoops\trace.java:198:  Invalid assertion (LoopDecreases)

Completed proof of trace.mforeach4(int[]) with prover !!!! - with warnings
Skipping proof of trace.mforeach5(int[]) (excluded by -method)
Completed proving methods in trace
1 warning
