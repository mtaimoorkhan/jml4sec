package javax.safetycritical;


public final class CyclicSchedule {
 
  /*@ 
    public invariant 
      this.getFrames() != null &&
      ( \forall int i; 0 <= i && i < getFrames().length; getFrames()[i] != null );
    @*/

 
  /*@ 
    public normal_behavior
      requires frames != null &&
        ( \forall int i; 0 <= i && i < frames.length; frames[i] != null );
  
      ensures getFrames() != null;
      ensures getFrames().length == frames.length;
      ensures(\forall int i; 0 <= i && i < getFrames().length; getFrames()[i].equals(frames[i]) );
    also
      exceptional_behavior
        requires frames == null ||
          ( \exists int i; 0 <= i && i < frames.length; frames[i] == null );
        signals (IllegalArgumentException e) true;
    @*/
  public CyclicSchedule(Frame[] frames) throws IllegalArgumentException;  


  //@ pure helper
  /*@ spec_public @*/ Frame[] getFrames(); 

}
