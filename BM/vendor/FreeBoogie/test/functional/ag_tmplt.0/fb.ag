// Program organization
Program = Declaration! decl, Program tail;
Declaration :> TypeDecl, ConstantDecl, Function, Axiom, VariableDecl, 
               Procedure, Implementation;

// Types and constants
Type :> PrimitiveType, Identifier, ArrayType, MatrixType;
ArrayType = Type! indexType, Type! elemType;
MatrixType = Type! rowType, Type! colType, Type! elemType;
PrimitiveType = enum(Literal: BOOL, INT, REF, NAME, ANY) val;
TypeDecl = String! name;
ConstantDecl = String! id, Type! type;

// Uninterpreted functions, axioms, and global variables
Function = String! name, Parameters args, Parameters results;
Parameters = VariableDecl! parameter, Parameters tail;
Axiom = Expr! expr;
VariableDecl = String name, Type! type; // split the case where name is mandatory?

// Procedures and implementations
Procedure = Function! signature, Specification spec, Body body;
Specification = enum(Type: REQUIRES, MODIFIES, ENSURES) type,
                Expr! expr, Specification tail;
Implementation = Function! signature, Body! body;
Body = LocalDecls vars, Block! block;
LocalDecls = VariableDecl! decl, LocalDecls tail;
Block = String! name, Commands cmds, BlockEnd! end;
BlockEnd = enum(Type: GOTO, RETURN) type, Identifiers dest;

// Commands
Commands = Command! cmd, Commands tail;
Command :> AssignmentCmd, AssertAssumeCmd, HavocCmd, CallCmd;
AssignmentCmd = String! lhs, Index idx, Expr! rhs;
AssertAssumeCmd = enum(Type: ASSERT, ASSUME) type, Expr! expr;
HavocCmd = String! name;
CallCmd = String! function, Identifiers results, Exprs args;
Index = Expr! a, Expr b;

// Expressions
Expr :> BinaryOp, UnaryOp, Atom;
BinaryOp = enum(Op: PLUS, MINUS, MUL, DIV, MOD, EQ, NEQ, LT, LE,
                    GE, GT, SUBTYPE, EQUIV, IMPLIES, AND, OR) op,
           Expr! left, Expr! right;
UnaryOp = enum(Op: MINUS, NOT) op, Expr! e;
Atom :> AtomLit, AtomNum, AtomId, AtomFun, AtomOld, AtomCast, AtomQuant;
AtomLit = enum(Type: FALSE, TRUE, NULL) val;
AtomNum = int val;
AtomId = String! id;
AtomFun = String! function, Exprs args;
AtomOld = Expr! e;
AtomCast = Expr! e, Type! type;
AtomQuant = enum(Type: EXISTS, FORALL) quant, VariableDecls! vars, Expr! e;

// Some simple lists
Identifiers = String! name, Identifiers tail;
Exprs = Expr! expr, Exprs tail;
VariableDecls = VariableDecl! decl, VariableDecls tail;

// Extra invariants
Specification: type==Type.MODIFIES ==> \typeof(expr)==Identifier

