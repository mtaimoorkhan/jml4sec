(set-option :print-success true)
(set-option :produce-models true)
(set-logic AUFLIA)
(declare-sort REF 0)
(declare-fun NULL () REF)
(declare-fun THIS () REF)
(declare-fun stringConcat (REF REF ) REF)
(declare-fun stringLength (REF ) Int)
(assert (distinct THIS NULL))
(declare-fun __JMLlength () (Array REF Int))
(assert (forall ((o REF) ) (>= (select __JMLlength o) 0)))
(assert (forall ((s1 REF) (s2 REF) ) (distinct (stringConcat s1 s2) NULL)))
(declare-fun asIntArray (REF ) (Array Int Int))
(declare-fun asREFArray (REF ) (Array Int REF))
(declare-fun intValue (REF ) Int)
(declare-fun booleanValue (REF ) Bool)
(declare-sort JMLTypeSort 0)
(declare-fun javaTypeOf (REF ) REF)
(declare-fun jmlTypeOf (REF ) JMLTypeSort)
(declare-fun typearg1_1 (JMLTypeSort ) JMLTypeSort)
(declare-fun typearg2_1 (JMLTypeSort ) JMLTypeSort)
(declare-fun typearg2_2 (JMLTypeSort ) JMLTypeSort)
(declare-fun javaSubType (REF REF ) Bool)
(declare-fun jmlSubType (JMLTypeSort JMLTypeSort ) Bool)
(declare-fun erasure (JMLTypeSort ) REF)
(assert (forall ((o REF) ) (= (erasure (jmlTypeOf o)) (javaTypeOf o))))
(declare-fun _makeArrayType (REF ) REF)
(declare-fun _isArrayType (REF ) Bool)
(declare-fun _makeJMLArrayType (JMLTypeSort ) JMLTypeSort)
(declare-fun _isJMLArrayType (JMLTypeSort ) Bool)
(declare-fun __arrayElemType (JMLTypeSort ) JMLTypeSort)
(assert (forall ((T JMLTypeSort) ) (= (erasure (_makeJMLArrayType T)) (_makeArrayType (erasure T)))))
(assert (forall ((T JMLTypeSort) ) (= (__arrayElemType (_makeJMLArrayType T)) T)))
(assert (forall ((T REF) ) (_isArrayType (_makeArrayType T))))
(assert (forall ((T JMLTypeSort) ) (_isJMLArrayType (_makeJMLArrayType T))))
(assert (forall ((T1 REF) (T2 REF) ) (= (javaSubType (_makeArrayType T1) (_makeArrayType T2)) (javaSubType T1 T2))))
(assert (forall ((T1 JMLTypeSort) (T2 JMLTypeSort) ) (= (jmlSubType (_makeJMLArrayType T1) (_makeJMLArrayType T2)) (jmlSubType T1 T2))))
(declare-fun nonnullelements (REF (Array REF (Array Int REF)) ) Bool)
(assert (forall ((a REF) (arrays (Array REF (Array Int REF))) ) (= (nonnullelements a arrays) (forall ((i Int) ) (=> (and (<= 0 i) (< i (select __JMLlength a))) (distinct NULL (select (select arrays a) i)))))))
(assert (forall ((t JMLTypeSort) (tt JMLTypeSort) ) (=> (jmlSubType t tt) (javaSubType (erasure t) (erasure tt)))))
(declare-fun _JMLT_1 (REF JMLTypeSort ) JMLTypeSort)
(assert (forall ((JVT REF) (JMLT JMLTypeSort) ) (= (erasure (_JMLT_1 JVT JMLT)) JVT)))
(assert (forall ((JVT REF) (JMLT JMLTypeSort) ) (= (typearg1_1 (_JMLT_1 JVT JMLT)) JMLT)))
(assert (forall ((JVT REF) (JMLT1 JMLTypeSort) (JMLT2 JMLTypeSort) ) (=> (= (_JMLT_1 JVT JMLT1) (_JMLT_1 JVT JMLT2)) (= JMLT1 JMLT2))))
(declare-fun _JMLT_2 (REF JMLTypeSort JMLTypeSort ) JMLTypeSort)
(assert (forall ((JVT REF) (JMLT1 JMLTypeSort) (JMLT2 JMLTypeSort) ) (= (erasure (_JMLT_2 JVT JMLT1 JMLT2)) JVT)))
(assert (forall ((JVT REF) (JMLT1 JMLTypeSort) (JMLT2 JMLTypeSort) ) (= (typearg2_2 (_JMLT_2 JVT JMLT1 JMLT2)) JMLT2)))
(assert (forall ((T1 REF) (T2 REF) (J1 JMLTypeSort) (J2 JMLTypeSort) ) (=> (= (_JMLT_1 T1 J1) (_JMLT_1 T2 J2)) (and (= T1 T2) (= J1 J2)))))
(assert (forall ((T1 REF) (T2 REF) (J1 JMLTypeSort) ) (=> (javaSubType T1 T2) (jmlSubType (_JMLT_1 T1 J1) (_JMLT_1 T2 J1)))))
(assert (forall ((T1 REF) (T2 REF) (J1 JMLTypeSort) (J2 JMLTypeSort) ) (=> (and (javaSubType T1 T2) (distinct J1 J2)) (not (jmlSubType (_JMLT_1 T1 J1) (_JMLT_1 T2 J2))))))
(assert (forall ((T1 REF) (J1 JMLTypeSort) (J2 JMLTypeSort) ) (= (jmlSubType (_JMLT_1 T1 J1) (_JMLT_1 T1 J2)) (= J1 J2))))
(assert (forall ((T1 REF) (T2 REF) ) (=> (= T1 T2) (javaSubType T1 T2))))
(assert (forall ((T1 JMLTypeSort) (T2 JMLTypeSort) ) (=> (= T1 T2) (jmlSubType T1 T2))))
(assert (forall ((T1 JMLTypeSort) (T2 JMLTypeSort) ) (=> (jmlSubType T1 T2) (javaSubType (erasure T1) (erasure T2)))))
(declare-fun T_org_jmlspecs_lang_JMLDataGroup () REF)
(assert (not (_isArrayType T_org_jmlspecs_lang_JMLDataGroup)))
(assert (forall ((t REF) ) (=> (javaSubType t T_org_jmlspecs_lang_JMLDataGroup) (= t T_org_jmlspecs_lang_JMLDataGroup))))
(declare-fun JMLT_org_jmlspecs_lang_JMLDataGroup () JMLTypeSort)
(assert (not (_isJMLArrayType JMLT_org_jmlspecs_lang_JMLDataGroup)))
(assert (= (erasure JMLT_org_jmlspecs_lang_JMLDataGroup) T_org_jmlspecs_lang_JMLDataGroup))
(assert (forall ((t JMLTypeSort) ) (=> (jmlSubType t JMLT_org_jmlspecs_lang_JMLDataGroup) (= t JMLT_org_jmlspecs_lang_JMLDataGroup))))
(declare-fun T_java_lang_Object () REF)
(assert (not (_isArrayType T_java_lang_Object)))
(declare-fun JMLT_java_lang_Object () JMLTypeSort)
(assert (not (_isJMLArrayType JMLT_java_lang_Object)))
(assert (= (erasure JMLT_java_lang_Object) T_java_lang_Object))
(declare-fun T_tt_TestJava () REF)
(assert (not (_isArrayType T_tt_TestJava)))
(declare-fun JMLT_tt_TestJava () JMLTypeSort)
(assert (not (_isJMLArrayType JMLT_tt_TestJava)))
(assert (= (erasure JMLT_tt_TestJava) T_tt_TestJava))
(declare-fun T_java_lang_String () REF)
(assert (not (_isArrayType T_java_lang_String)))
(assert (forall ((t REF) ) (=> (javaSubType t T_java_lang_String) (= t T_java_lang_String))))
(declare-fun JMLT_java_lang_String () JMLTypeSort)
(assert (not (_isJMLArrayType JMLT_java_lang_String)))
(assert (= (erasure JMLT_java_lang_String) T_java_lang_String))
(assert (forall ((t JMLTypeSort) ) (=> (jmlSubType t JMLT_java_lang_String) (= t JMLT_java_lang_String))))
(declare-fun T_java_lang_RuntimeException () REF)
(assert (not (_isArrayType T_java_lang_RuntimeException)))
(declare-fun JMLT_java_lang_RuntimeException () JMLTypeSort)
(assert (not (_isJMLArrayType JMLT_java_lang_RuntimeException)))
(assert (= (erasure JMLT_java_lang_RuntimeException) T_java_lang_RuntimeException))
(declare-fun T_java_lang_Exception () REF)
(assert (not (_isArrayType T_java_lang_Exception)))
(declare-fun JMLT_java_lang_Exception () JMLTypeSort)
(assert (not (_isJMLArrayType JMLT_java_lang_Exception)))
(assert (= (erasure JMLT_java_lang_Exception) T_java_lang_Exception))
(assert (distinct T_org_jmlspecs_lang_JMLDataGroup T_java_lang_Object T_tt_TestJava T_java_lang_String T_java_lang_RuntimeException T_java_lang_Exception))
(assert (distinct JMLT_org_jmlspecs_lang_JMLDataGroup JMLT_java_lang_Object JMLT_tt_TestJava JMLT_java_lang_String JMLT_java_lang_RuntimeException JMLT_java_lang_Exception))
(assert (javaSubType T_org_jmlspecs_lang_JMLDataGroup T_org_jmlspecs_lang_JMLDataGroup))
(assert (javaSubType (_makeArrayType T_org_jmlspecs_lang_JMLDataGroup) (_makeArrayType T_org_jmlspecs_lang_JMLDataGroup)))
(assert (jmlSubType JMLT_org_jmlspecs_lang_JMLDataGroup JMLT_org_jmlspecs_lang_JMLDataGroup))
(assert (jmlSubType (_makeJMLArrayType JMLT_org_jmlspecs_lang_JMLDataGroup) (_makeJMLArrayType JMLT_org_jmlspecs_lang_JMLDataGroup)))
(assert (javaSubType T_org_jmlspecs_lang_JMLDataGroup T_java_lang_Object))
(assert (javaSubType (_makeArrayType T_org_jmlspecs_lang_JMLDataGroup) (_makeArrayType T_java_lang_Object)))
(assert (jmlSubType JMLT_org_jmlspecs_lang_JMLDataGroup JMLT_java_lang_Object))
(assert (jmlSubType (_makeJMLArrayType JMLT_org_jmlspecs_lang_JMLDataGroup) (_makeJMLArrayType JMLT_java_lang_Object)))
(assert (not (javaSubType T_org_jmlspecs_lang_JMLDataGroup T_tt_TestJava)))
(assert (not (javaSubType (_makeArrayType T_org_jmlspecs_lang_JMLDataGroup) (_makeArrayType T_tt_TestJava))))
(assert (not (jmlSubType JMLT_org_jmlspecs_lang_JMLDataGroup JMLT_tt_TestJava)))
(assert (not (jmlSubType (_makeJMLArrayType JMLT_org_jmlspecs_lang_JMLDataGroup) (_makeJMLArrayType JMLT_tt_TestJava))))
(assert (not (javaSubType T_org_jmlspecs_lang_JMLDataGroup T_java_lang_String)))
(assert (not (javaSubType (_makeArrayType T_org_jmlspecs_lang_JMLDataGroup) (_makeArrayType T_java_lang_String))))
(assert (not (jmlSubType JMLT_org_jmlspecs_lang_JMLDataGroup JMLT_java_lang_String)))
(assert (not (jmlSubType (_makeJMLArrayType JMLT_org_jmlspecs_lang_JMLDataGroup) (_makeJMLArrayType JMLT_java_lang_String))))
(assert (not (javaSubType T_org_jmlspecs_lang_JMLDataGroup T_java_lang_RuntimeException)))
(assert (not (javaSubType (_makeArrayType T_org_jmlspecs_lang_JMLDataGroup) (_makeArrayType T_java_lang_RuntimeException))))
(assert (not (jmlSubType JMLT_org_jmlspecs_lang_JMLDataGroup JMLT_java_lang_RuntimeException)))
(assert (not (jmlSubType (_makeJMLArrayType JMLT_org_jmlspecs_lang_JMLDataGroup) (_makeJMLArrayType JMLT_java_lang_RuntimeException))))
(assert (not (javaSubType T_org_jmlspecs_lang_JMLDataGroup T_java_lang_Exception)))
(assert (not (javaSubType (_makeArrayType T_org_jmlspecs_lang_JMLDataGroup) (_makeArrayType T_java_lang_Exception))))
(assert (not (jmlSubType JMLT_org_jmlspecs_lang_JMLDataGroup JMLT_java_lang_Exception)))
(assert (not (jmlSubType (_makeJMLArrayType JMLT_org_jmlspecs_lang_JMLDataGroup) (_makeJMLArrayType JMLT_java_lang_Exception))))
(assert (not (javaSubType T_java_lang_Object T_org_jmlspecs_lang_JMLDataGroup)))
(assert (not (javaSubType (_makeArrayType T_java_lang_Object) (_makeArrayType T_org_jmlspecs_lang_JMLDataGroup))))
(assert (not (jmlSubType JMLT_java_lang_Object JMLT_org_jmlspecs_lang_JMLDataGroup)))
(assert (not (jmlSubType (_makeJMLArrayType JMLT_java_lang_Object) (_makeJMLArrayType JMLT_org_jmlspecs_lang_JMLDataGroup))))
(assert (javaSubType T_java_lang_Object T_java_lang_Object))
(assert (javaSubType (_makeArrayType T_java_lang_Object) (_makeArrayType T_java_lang_Object)))
(assert (jmlSubType JMLT_java_lang_Object JMLT_java_lang_Object))
(assert (jmlSubType (_makeJMLArrayType JMLT_java_lang_Object) (_makeJMLArrayType JMLT_java_lang_Object)))
(assert (not (javaSubType T_java_lang_Object T_tt_TestJava)))
(assert (not (javaSubType (_makeArrayType T_java_lang_Object) (_makeArrayType T_tt_TestJava))))
(assert (not (jmlSubType JMLT_java_lang_Object JMLT_tt_TestJava)))
(assert (not (jmlSubType (_makeJMLArrayType JMLT_java_lang_Object) (_makeJMLArrayType JMLT_tt_TestJava))))
(assert (not (javaSubType T_java_lang_Object T_java_lang_String)))
(assert (not (javaSubType (_makeArrayType T_java_lang_Object) (_makeArrayType T_java_lang_String))))
(assert (not (jmlSubType JMLT_java_lang_Object JMLT_java_lang_String)))
(assert (not (jmlSubType (_makeJMLArrayType JMLT_java_lang_Object) (_makeJMLArrayType JMLT_java_lang_String))))
(assert (not (javaSubType T_java_lang_Object T_java_lang_RuntimeException)))
(assert (not (javaSubType (_makeArrayType T_java_lang_Object) (_makeArrayType T_java_lang_RuntimeException))))
(assert (not (jmlSubType JMLT_java_lang_Object JMLT_java_lang_RuntimeException)))
(assert (not (jmlSubType (_makeJMLArrayType JMLT_java_lang_Object) (_makeJMLArrayType JMLT_java_lang_RuntimeException))))
(assert (not (javaSubType T_java_lang_Object T_java_lang_Exception)))
(assert (not (javaSubType (_makeArrayType T_java_lang_Object) (_makeArrayType T_java_lang_Exception))))
(assert (not (jmlSubType JMLT_java_lang_Object JMLT_java_lang_Exception)))
(assert (not (jmlSubType (_makeJMLArrayType JMLT_java_lang_Object) (_makeJMLArrayType JMLT_java_lang_Exception))))
(assert (not (javaSubType T_tt_TestJava T_org_jmlspecs_lang_JMLDataGroup)))
(assert (not (javaSubType (_makeArrayType T_tt_TestJava) (_makeArrayType T_org_jmlspecs_lang_JMLDataGroup))))
(assert (not (jmlSubType JMLT_tt_TestJava JMLT_org_jmlspecs_lang_JMLDataGroup)))
(assert (not (jmlSubType (_makeJMLArrayType JMLT_tt_TestJava) (_makeJMLArrayType JMLT_org_jmlspecs_lang_JMLDataGroup))))
(assert (javaSubType T_tt_TestJava T_java_lang_Object))
(assert (javaSubType (_makeArrayType T_tt_TestJava) (_makeArrayType T_java_lang_Object)))
(assert (jmlSubType JMLT_tt_TestJava JMLT_java_lang_Object))
(assert (jmlSubType (_makeJMLArrayType JMLT_tt_TestJava) (_makeJMLArrayType JMLT_java_lang_Object)))
(assert (javaSubType T_tt_TestJava T_tt_TestJava))
(assert (javaSubType (_makeArrayType T_tt_TestJava) (_makeArrayType T_tt_TestJava)))
(assert (jmlSubType JMLT_tt_TestJava JMLT_tt_TestJava))
(assert (jmlSubType (_makeJMLArrayType JMLT_tt_TestJava) (_makeJMLArrayType JMLT_tt_TestJava)))
(assert (not (javaSubType T_tt_TestJava T_java_lang_String)))
(assert (not (javaSubType (_makeArrayType T_tt_TestJava) (_makeArrayType T_java_lang_String))))
(assert (not (jmlSubType JMLT_tt_TestJava JMLT_java_lang_String)))
(assert (not (jmlSubType (_makeJMLArrayType JMLT_tt_TestJava) (_makeJMLArrayType JMLT_java_lang_String))))
(assert (not (javaSubType T_tt_TestJava T_java_lang_RuntimeException)))
(assert (not (javaSubType (_makeArrayType T_tt_TestJava) (_makeArrayType T_java_lang_RuntimeException))))
(assert (not (jmlSubType JMLT_tt_TestJava JMLT_java_lang_RuntimeException)))
(assert (not (jmlSubType (_makeJMLArrayType JMLT_tt_TestJava) (_makeJMLArrayType JMLT_java_lang_RuntimeException))))
(assert (not (javaSubType T_tt_TestJava T_java_lang_Exception)))
(assert (not (javaSubType (_makeArrayType T_tt_TestJava) (_makeArrayType T_java_lang_Exception))))
(assert (not (jmlSubType JMLT_tt_TestJava JMLT_java_lang_Exception)))
(assert (not (jmlSubType (_makeJMLArrayType JMLT_tt_TestJava) (_makeJMLArrayType JMLT_java_lang_Exception))))
(assert (not (javaSubType T_java_lang_String T_org_jmlspecs_lang_JMLDataGroup)))
(assert (not (javaSubType (_makeArrayType T_java_lang_String) (_makeArrayType T_org_jmlspecs_lang_JMLDataGroup))))
(assert (not (jmlSubType JMLT_java_lang_String JMLT_org_jmlspecs_lang_JMLDataGroup)))
(assert (not (jmlSubType (_makeJMLArrayType JMLT_java_lang_String) (_makeJMLArrayType JMLT_org_jmlspecs_lang_JMLDataGroup))))
(assert (javaSubType T_java_lang_String T_java_lang_Object))
(assert (javaSubType (_makeArrayType T_java_lang_String) (_makeArrayType T_java_lang_Object)))
(assert (jmlSubType JMLT_java_lang_String JMLT_java_lang_Object))
(assert (jmlSubType (_makeJMLArrayType JMLT_java_lang_String) (_makeJMLArrayType JMLT_java_lang_Object)))
(assert (not (javaSubType T_java_lang_String T_tt_TestJava)))
(assert (not (javaSubType (_makeArrayType T_java_lang_String) (_makeArrayType T_tt_TestJava))))
(assert (not (jmlSubType JMLT_java_lang_String JMLT_tt_TestJava)))
(assert (not (jmlSubType (_makeJMLArrayType JMLT_java_lang_String) (_makeJMLArrayType JMLT_tt_TestJava))))
(assert (javaSubType T_java_lang_String T_java_lang_String))
(assert (javaSubType (_makeArrayType T_java_lang_String) (_makeArrayType T_java_lang_String)))
(assert (jmlSubType JMLT_java_lang_String JMLT_java_lang_String))
(assert (jmlSubType (_makeJMLArrayType JMLT_java_lang_String) (_makeJMLArrayType JMLT_java_lang_String)))
(assert (not (javaSubType T_java_lang_String T_java_lang_RuntimeException)))
(assert (not (javaSubType (_makeArrayType T_java_lang_String) (_makeArrayType T_java_lang_RuntimeException))))
(assert (not (jmlSubType JMLT_java_lang_String JMLT_java_lang_RuntimeException)))
(assert (not (jmlSubType (_makeJMLArrayType JMLT_java_lang_String) (_makeJMLArrayType JMLT_java_lang_RuntimeException))))
(assert (not (javaSubType T_java_lang_String T_java_lang_Exception)))
(assert (not (javaSubType (_makeArrayType T_java_lang_String) (_makeArrayType T_java_lang_Exception))))
(assert (not (jmlSubType JMLT_java_lang_String JMLT_java_lang_Exception)))
(assert (not (jmlSubType (_makeJMLArrayType JMLT_java_lang_String) (_makeJMLArrayType JMLT_java_lang_Exception))))
(assert (not (javaSubType T_java_lang_RuntimeException T_org_jmlspecs_lang_JMLDataGroup)))
(assert (not (javaSubType (_makeArrayType T_java_lang_RuntimeException) (_makeArrayType T_org_jmlspecs_lang_JMLDataGroup))))
(assert (not (jmlSubType JMLT_java_lang_RuntimeException JMLT_org_jmlspecs_lang_JMLDataGroup)))
(assert (not (jmlSubType (_makeJMLArrayType JMLT_java_lang_RuntimeException) (_makeJMLArrayType JMLT_org_jmlspecs_lang_JMLDataGroup))))
(assert (javaSubType T_java_lang_RuntimeException T_java_lang_Object))
(assert (javaSubType (_makeArrayType T_java_lang_RuntimeException) (_makeArrayType T_java_lang_Object)))
(assert (jmlSubType JMLT_java_lang_RuntimeException JMLT_java_lang_Object))
(assert (jmlSubType (_makeJMLArrayType JMLT_java_lang_RuntimeException) (_makeJMLArrayType JMLT_java_lang_Object)))
(assert (not (javaSubType T_java_lang_RuntimeException T_tt_TestJava)))
(assert (not (javaSubType (_makeArrayType T_java_lang_RuntimeException) (_makeArrayType T_tt_TestJava))))
(assert (not (jmlSubType JMLT_java_lang_RuntimeException JMLT_tt_TestJava)))
(assert (not (jmlSubType (_makeJMLArrayType JMLT_java_lang_RuntimeException) (_makeJMLArrayType JMLT_tt_TestJava))))
(assert (not (javaSubType T_java_lang_RuntimeException T_java_lang_String)))
(assert (not (javaSubType (_makeArrayType T_java_lang_RuntimeException) (_makeArrayType T_java_lang_String))))
(assert (not (jmlSubType JMLT_java_lang_RuntimeException JMLT_java_lang_String)))
(assert (not (jmlSubType (_makeJMLArrayType JMLT_java_lang_RuntimeException) (_makeJMLArrayType JMLT_java_lang_String))))
(assert (javaSubType T_java_lang_RuntimeException T_java_lang_RuntimeException))
(assert (javaSubType (_makeArrayType T_java_lang_RuntimeException) (_makeArrayType T_java_lang_RuntimeException)))
(assert (jmlSubType JMLT_java_lang_RuntimeException JMLT_java_lang_RuntimeException))
(assert (jmlSubType (_makeJMLArrayType JMLT_java_lang_RuntimeException) (_makeJMLArrayType JMLT_java_lang_RuntimeException)))
(assert (javaSubType T_java_lang_RuntimeException T_java_lang_Exception))
(assert (javaSubType (_makeArrayType T_java_lang_RuntimeException) (_makeArrayType T_java_lang_Exception)))
(assert (jmlSubType JMLT_java_lang_RuntimeException JMLT_java_lang_Exception))
(assert (jmlSubType (_makeJMLArrayType JMLT_java_lang_RuntimeException) (_makeJMLArrayType JMLT_java_lang_Exception)))
(assert (not (javaSubType T_java_lang_Exception T_org_jmlspecs_lang_JMLDataGroup)))
(assert (not (javaSubType (_makeArrayType T_java_lang_Exception) (_makeArrayType T_org_jmlspecs_lang_JMLDataGroup))))
(assert (not (jmlSubType JMLT_java_lang_Exception JMLT_org_jmlspecs_lang_JMLDataGroup)))
(assert (not (jmlSubType (_makeJMLArrayType JMLT_java_lang_Exception) (_makeJMLArrayType JMLT_org_jmlspecs_lang_JMLDataGroup))))
(assert (javaSubType T_java_lang_Exception T_java_lang_Object))
(assert (javaSubType (_makeArrayType T_java_lang_Exception) (_makeArrayType T_java_lang_Object)))
(assert (jmlSubType JMLT_java_lang_Exception JMLT_java_lang_Object))
(assert (jmlSubType (_makeJMLArrayType JMLT_java_lang_Exception) (_makeJMLArrayType JMLT_java_lang_Object)))
(assert (not (javaSubType T_java_lang_Exception T_tt_TestJava)))
(assert (not (javaSubType (_makeArrayType T_java_lang_Exception) (_makeArrayType T_tt_TestJava))))
(assert (not (jmlSubType JMLT_java_lang_Exception JMLT_tt_TestJava)))
(assert (not (jmlSubType (_makeJMLArrayType JMLT_java_lang_Exception) (_makeJMLArrayType JMLT_tt_TestJava))))
(assert (not (javaSubType T_java_lang_Exception T_java_lang_String)))
(assert (not (javaSubType (_makeArrayType T_java_lang_Exception) (_makeArrayType T_java_lang_String))))
(assert (not (jmlSubType JMLT_java_lang_Exception JMLT_java_lang_String)))
(assert (not (jmlSubType (_makeJMLArrayType JMLT_java_lang_Exception) (_makeJMLArrayType JMLT_java_lang_String))))
(assert (not (javaSubType T_java_lang_Exception T_java_lang_RuntimeException)))
(assert (not (javaSubType (_makeArrayType T_java_lang_Exception) (_makeArrayType T_java_lang_RuntimeException))))
(assert (not (jmlSubType JMLT_java_lang_Exception JMLT_java_lang_RuntimeException)))
(assert (not (jmlSubType (_makeJMLArrayType JMLT_java_lang_Exception) (_makeJMLArrayType JMLT_java_lang_RuntimeException))))
(assert (javaSubType T_java_lang_Exception T_java_lang_Exception))
(assert (javaSubType (_makeArrayType T_java_lang_Exception) (_makeArrayType T_java_lang_Exception)))
(assert (jmlSubType JMLT_java_lang_Exception JMLT_java_lang_Exception))
(assert (jmlSubType (_makeJMLArrayType JMLT_java_lang_Exception) (_makeJMLArrayType JMLT_java_lang_Exception)))
(assert (forall ((t1 REF) (t2 REF) (t3 REF) ) (=> (and (javaSubType t1 t2) (javaSubType t2 t3)) (javaSubType t1 t3))))
(assert (forall ((t1 JMLTypeSort) (t2 JMLTypeSort) (t3 JMLTypeSort) ) (=> (and (jmlSubType t1 t2) (jmlSubType t2 t3)) (jmlSubType t1 t3))))
(declare-fun _heap___0 () Int)
(declare-fun java.lang.Object_privateState_1345 () (Array REF REF))
(declare-fun java.lang.Object_owner_1585 () (Array REF REF))
(declare-fun _isalloc___54 () (Array REF Bool))
(declare-fun java.lang.Object_objectState_1211 () (Array REF REF))
(declare-fun java.lang.Object_theHashCode_2129 () (Array REF Int))
(declare-fun f_78 () (Array REF Int))
(declare-fun java.lang.Object_objectTimesFinalized_9204 () (Array REF Int))
(declare-fun java.lang.Object_theString_6957 () (Array REF REF))
(declare-fun _JML___result_54_54___1 () REF)
(declare-fun _JML___exception_54_54___2 () REF)
(declare-fun _JML___termination_54_54___3 () Int)
(declare-fun ASSERT_15_54_54___4 () Bool)
(declare-fun _JML___exceptionCall_54_54___5 () REF)
(declare-fun _JML___exception_54_54___6 () REF)
(declare-fun _JML___termination_54_54___7 () Int)
(declare-fun f_78_54___8 () (Array REF Int))
(declare-fun ASSERT_14_54_54___9 () Bool)
(declare-fun BL_54Start_1 () Bool)
(declare-fun BL_54bodyBegin_2 () Bool)
(declare-fun BL_54_AfterLabel_10 () Bool)
(declare-fun BL_54_AfterLabel_11 () Bool)
(declare-fun BL_1757_then_13 () Bool)
(declare-fun BL_1757_else_14 () Bool)
(declare-fun BL_1757_afterIf_12 () Bool)
(declare-fun BL_1758_then_16 () Bool)
(declare-fun BL_1758_else_17 () Bool)
(declare-fun BL_1758_afterIf_15 () Bool)
(declare-fun BL_54_then_19 () Bool)
(declare-fun BL_54_else_20 () Bool)
(declare-fun BL_1758_then_22 () Bool)
(declare-fun BL_54_then_25 () Bool)
(declare-fun BL_54_else_26 () Bool)
(declare-fun BL_54_afterIf_24 () Bool)
(declare-fun BL_1758_else_23 () Bool)
(declare-fun BL_1758_afterIf_21 () Bool)
(declare-fun BL_54_throw_27 () Bool)
(declare-fun BL_54_afterIf_18 () Bool)
(declare-fun BL_54tryTarget_4 () Bool)
(declare-fun BL_54noException_6 () Bool)
(declare-fun BL_54nocatch_7 () Bool)
(declare-fun BL_54_finally_5 () Bool)
(declare-fun BL_54_then_29 () Bool)
(declare-fun BL_54_else_30 () Bool)
(declare-fun BL_54_afterIf_28 () Bool)
(declare-fun BL_54finallyNormal_8 () Bool)
(declare-fun BL_54finallyExit_9 () Bool)
(declare-fun BL_54_AfterTry_3 () Bool)
(assert (= BL_54Start_1 BL_54bodyBegin_2))
(declare-fun __JML_AssumeCheck_ () Int)
(assert (= BL_54bodyBegin_2 (=> (= _JML___result_54_54___1 NULL) (=> (= _JML___exception_54_54___2 NULL) (=> (= _JML___termination_54_54___3 0) (=> (distinct THIS NULL) (=> (or (= THIS NULL) (and (and (distinct THIS NULL) (javaSubType (javaTypeOf THIS) T_tt_TestJava)) (jmlSubType (jmlTypeOf THIS) JMLT_tt_TestJava))) (=> (and (<= (- 2147483648) (select java.lang.Object_objectTimesFinalized_9204 THIS)) (<= (select java.lang.Object_objectTimesFinalized_9204 THIS) 2147483647)) (=> (or (= (select java.lang.Object_theString_6957 THIS) NULL) (select _isalloc___54 (select java.lang.Object_theString_6957 THIS))) (=> (or (= (select java.lang.Object_theString_6957 THIS) NULL) (and (and (distinct (select java.lang.Object_theString_6957 THIS) NULL) (javaSubType (javaTypeOf (select java.lang.Object_theString_6957 THIS)) T_java_lang_String)) (jmlSubType (jmlTypeOf (select java.lang.Object_theString_6957 THIS)) JMLT_java_lang_String))) (=> (and (<= (- 2147483648) (select java.lang.Object_theHashCode_2129 THIS)) (<= (select java.lang.Object_theHashCode_2129 THIS) 2147483647)) (=> (or (= (select java.lang.Object_owner_1585 THIS) NULL) (select _isalloc___54 (select java.lang.Object_owner_1585 THIS))) (=> (or (= (select java.lang.Object_owner_1585 THIS) NULL) (and (and (distinct (select java.lang.Object_owner_1585 THIS) NULL) (javaSubType (javaTypeOf (select java.lang.Object_owner_1585 THIS)) T_java_lang_Object)) (jmlSubType (jmlTypeOf (select java.lang.Object_owner_1585 THIS)) JMLT_java_lang_Object))) (=> (or (= (select java.lang.Object_privateState_1345 THIS) NULL) (select _isalloc___54 (select java.lang.Object_privateState_1345 THIS))) (=> (or (= (select java.lang.Object_privateState_1345 THIS) NULL) (and (and (distinct (select java.lang.Object_privateState_1345 THIS) NULL) (javaSubType (javaTypeOf (select java.lang.Object_privateState_1345 THIS)) T_org_jmlspecs_lang_JMLDataGroup)) (jmlSubType (jmlTypeOf (select java.lang.Object_privateState_1345 THIS)) JMLT_org_jmlspecs_lang_JMLDataGroup))) (=> (or (= (select java.lang.Object_objectState_1211 THIS) NULL) (select _isalloc___54 (select java.lang.Object_objectState_1211 THIS))) (=> (or (= (select java.lang.Object_objectState_1211 THIS) NULL) (and (and (distinct (select java.lang.Object_objectState_1211 THIS) NULL) (javaSubType (javaTypeOf (select java.lang.Object_objectState_1211 THIS)) T_org_jmlspecs_lang_JMLDataGroup)) (jmlSubType (jmlTypeOf (select java.lang.Object_objectState_1211 THIS)) JMLT_org_jmlspecs_lang_JMLDataGroup))) (=> (and (<= (- 2147483648) (select f_78 THIS)) (<= (select f_78 THIS) 2147483647)) (=> (= ASSERT_15_54_54___4 (distinct __JML_AssumeCheck_ 1)) (and ASSERT_15_54_54___4 BL_54_AfterLabel_10))))))))))))))))))))
(define-fun _JML__tmp1 () REF THIS)
(assert (= BL_54_AfterLabel_10 BL_54_AfterLabel_11))
(define-fun _JML__tmp3 () Bool true)
(assert (= BL_54_AfterLabel_11 (and BL_1757_then_13 BL_1757_else_14)))
(assert (= BL_1757_then_13 (=> _JML__tmp3 BL_1757_afterIf_12)))
(assert (= BL_1757_else_14 (=> (not _JML__tmp3) BL_1757_afterIf_12)))
(assert (= BL_1757_afterIf_12 (and BL_1758_then_16 BL_1758_else_17)))
(assert (= BL_1758_then_16 (=> _JML__tmp3 BL_1758_afterIf_15)))
(assert (= BL_1758_else_17 (=> (not _JML__tmp3) BL_1758_afterIf_15)))
(assert (= BL_1758_afterIf_15 (and BL_54_then_19 BL_54_else_20)))
(assert (= BL_54_then_19 (=> (= _JML___exceptionCall_54_54___5 NULL) BL_54_afterIf_18)))
(assert (= BL_54_else_20 (=> (not (= _JML___exceptionCall_54_54___5 NULL)) (=> (= _JML___exception_54_54___6 _JML___exceptionCall_54_54___5) (=> (= _JML___termination_54_54___7 (- 54)) (=> false (and BL_1758_then_22 BL_1758_else_23)))))))
(assert (= BL_1758_then_22 (=> _JML__tmp3 (and BL_54_then_25 BL_54_else_26))))
(assert (= BL_54_then_25 (=> true (=> false BL_54_afterIf_24))))
(assert (= BL_54_else_26 (=> (not true) BL_54_afterIf_24)))
(assert (= BL_54_afterIf_24 (=> (or false (and (distinct _JML___exception_54_54___6 NULL) (javaSubType (javaTypeOf _JML___exception_54_54___6) T_java_lang_RuntimeException))) BL_1758_afterIf_21)))
(assert (= BL_1758_else_23 (=> (not _JML__tmp3) BL_1758_afterIf_21)))
(assert (= BL_1758_afterIf_21 BL_54_throw_27))
(assert (= BL_54_throw_27 (=> (= _heap___0 _heap___0) (=> (= f_78_54___8 f_78) BL_54tryTarget_4))))
(assert (= BL_54_afterIf_18 (=> (= f_78_54___8 (store f_78 THIS 0)) (=> (= _JML___exception_54_54___6 _JML___exception_54_54___2) (=> (= _JML___termination_54_54___7 _JML___termination_54_54___3) BL_54tryTarget_4)))))
(assert (= BL_54tryTarget_4 (and BL_54noException_6 BL_54nocatch_7)))
(assert (= BL_54noException_6 (=> (= _JML___exception_54_54___6 NULL) BL_54_finally_5)))
(assert (= BL_54nocatch_7 (=> (distinct _JML___exception_54_54___6 NULL) BL_54_finally_5)))
(assert (= BL_54_finally_5 (and BL_54_then_29 BL_54_else_30)))
(assert (= BL_54_then_29 (=> (= _JML___exception_54_54___6 NULL) BL_54_afterIf_28)))
(assert (= BL_54_else_30 (=> (not (= _JML___exception_54_54___6 NULL)) (=> (= ASSERT_14_54_54___9 (and (distinct _JML___exception_54_54___6 NULL) (javaSubType (javaTypeOf _JML___exception_54_54___6) T_java_lang_RuntimeException))) (and ASSERT_14_54_54___9 BL_54_afterIf_28)))))
(assert (= BL_54_afterIf_28 (and BL_54finallyNormal_8 BL_54finallyExit_9)))
(assert (= BL_54finallyNormal_8 (=> (= _JML___termination_54_54___7 0) BL_54_AfterTry_3)))
(assert (= BL_54finallyExit_9 (=> (distinct _JML___termination_54_54___7 0) BL_54_AfterTry_3)))
(assert (= BL_54_AfterTry_3 true))
(assert (not BL_54Start_1))
(push 1)
(assert (= __JML_AssumeCheck_ 0))
(push 1)
(check-sat)
(exit)
