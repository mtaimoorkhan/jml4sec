package uk.gre.ac.openjmlsec.gen.impl;

import java.util.ArrayList;
import java.util.Collections;

import org.jmlspecs.openjml.IJmlClauseKind;
import org.jmlspecs.openjml.JmlTree.JmlMethodClause;
import org.jmlspecs.openjml.JmlTree.JmlMethodClauseAlarms;
import org.jmlspecs.openjml.JmlTree.JmlMethodClauseExpr;
import org.jmlspecs.openjml.JmlTree.JmlMethodSpecs;
import org.jmlspecs.openjml.JmlTree.JmlSpecificationCase;
import org.jmlspecs.openjml.ext.AlarmsClauseExtension;
import org.jmlspecs.openjml.ext.MethodExprClauseExtensions;
import org.jmlspecs.openjml.ext.MethodSimpleClauseExtensions;

import com.sun.tools.javac.tree.JCTree;
import com.sun.tools.javac.tree.JCTree.JCCase;
import com.sun.tools.javac.tree.JCTree.JCExpression;
import com.sun.tools.javac.tree.JCTree.JCStatement;
import com.sun.tools.javac.tree.TreeMaker;
import com.sun.tools.javac.util.Context;
import com.sun.tools.javac.util.List;
import com.sun.tools.javac.util.Names;

import uk.gre.ac.openjmlsec.gen.MethodCodeGenerator;

public class CompromisedBehaviorCodeGenerator implements MethodCodeGenerator {

    public static final CompromisedBehaviorCodeGenerator instance = new CompromisedBehaviorCodeGenerator();

    private CompromisedBehaviorCodeGenerator() {
    }

    private TreeMaker maker;

    private Names     symbolsTable;

    public void init(Context context) {
        this.maker = TreeMaker.instance(context);
        this.symbolsTable = Names.instance(context);
    }

    @Override
    public void generate(JmlMethodSpecs tree,
            java.util.List<JmlSpecificationCase> cases) {
        
        System.out.println("DEBUG-SYM: " + Thread.currentThread().getStackTrace()[1]);
        
        JCTree.JCBlock methodBody = ((JCTree.JCMethodDecl) tree.decl).body;

        java.util.List<JCTree.JCIf> ifStatements = translateSpecsToIfStatements(
                cases);

        Collections.reverse(ifStatements);

        ifStatements.forEach(stmt -> {
            methodBody.stats = methodBody.stats.prepend(stmt);
        });
    }

    @Override
    public String generatorKey() {
        return MethodSimpleClauseExtensions.compromisedBehaviorClause.keyword;
    }

    private java.util.List<JCTree.JCIf> translateSpecsToIfStatements(
            java.util.List<JmlSpecificationCase> genCandidateCases) {

        java.util.List<JCTree.JCIf> ifStatements = new ArrayList<>();

        for (JmlSpecificationCase specCase : genCandidateCases) {

            JCTree.JCExpression selector = maker
                    .Ident(symbolsTable.fromString("_currentAttack"));

            JCTree.JCExpression conditionExpression = null;
            java.util.List<JCTree.JCCase> cases = new ArrayList<>();
            for (Object clause : specCase.clauses) {
                String clauseName = ((JmlMethodClause) clause).clauseKind.keyword;
                if (clauseName.equalsIgnoreCase(
                        MethodExprClauseExtensions.requiresID)) {
                    if (conditionExpression == null) {
                        conditionExpression = ((JmlMethodClauseExpr) clause).expression;
                    } else {
                        conditionExpression = maker.Binary(JCTree.Tag.AND,
                                conditionExpression,
                                ((JmlMethodClauseExpr) clause).expression);
                    }
                } else if (clauseName
                        .equalsIgnoreCase(AlarmsClauseExtension.alarmsID)) {
                    JCExpression casePattern = ((JmlMethodClauseAlarms) clause).attackType;
                    JCStatement caseStatement = maker
                            .Exec(((JmlMethodClauseAlarms) clause).expression);
                    cases.add(maker.Case(casePattern,
                            List.of(caseStatement, maker.Break(null))));
                }
            }

            JCCase defaultCase = maker.Case(
                    maker.Ident(symbolsTable.fromString("NONE")),
                    List.of(maker.Break(null)));
            JCTree.JCSwitch switchCaseStatement = maker.Switch(selector,
                    List.from(cases).append(defaultCase));

            ifStatements.add(maker.If(conditionExpression,
                    maker.Block(0L, List.of(switchCaseStatement)), null));

        }

        return ifStatements;
    }

}
